INPUT：jar file path
OUTPUT：Call Stack List of Algorithm Complexity Vulnerability

Algorithm process：



method definitions:
  method isDepthCondition() //Check whether the statement is a recursive depth conditional judgment statement
  
  method getDepthConditionValue（input:IfStmt ifstmt） //Get the conditional expression and return the operand of the conditional expression
  
  method isAdd() //Determine whether the operand of the conditional expression has an auto-increment operation

  method isClassAttributeOrParameterRef(value ) //Determine whether the variable is a method parameter or class attribute

  method  isHasDepthLimit(input:Body body) //
      begin:
              units = body.getUnits();
              Traverse  units:
                if unit instance IfStmt:
                    if isDepthCondition(unit):
                      value = call  getDepthConditionValue(unit);
                      if isAdd(value) &&  isClassAttributeOrParameterRef(value):
                  
                          return  true ;//depth limit
                      return  false; //not depth limit
      end 
  
  
  
  
  method isInException(input：Body body, SootMethod sootMethod)  //Determine whether the method is in an error handling block
     
  method methodAnalyser(input：SootMethod sootMethod, Stack sootMethodStack) //Analyze method for unlimited recursion
      begin：
          body = sootMethod.retrieveActiveBody();
          units = body.getUnits();
          Traverse  units:
              if unit instanceof InvokeStmt:
                  method = unit.getmethod(); // get the sootmethod 
                  if isInExcetion(body,method):
                      continue
                  if sootMethodStack contains invokeMethod :
                          if !isHasDepthLimit(method.retrieveActiveBody()):
                                 sootMethodStack.push(method);
                                  return ;
                  if !method.isAbstract():
                          sootMethodStack.push(method);
                          methodAnalyser(method,sootMethodStack);
                          sootMethodStack.pop();
              if unit instanceof AssignStmt:
                  boxes = unit.getUseBoxes();
                  if boxes.get(0).getValue() instanceof InvokeExpr:
                            method = unit.getMethod;
                            if isInExcetion(body,method):
                                  continue
                            if sootMethodStack contains invokeMethod :
                               if !isHasDepthLimit(method.retrieveActiveBody()):
                                  sootMethodStack.push(method);
                                  recordMaxStack(sootMethodStack,sootMethodStacks);
                                  return 
                            if !method.isAbstract():
                                 sootMethodStack.push(method);
                                 methodAnalyser(method,sootMethodStack);
                                 sootMethodStack.pop();
                            
            
      end


main method
    begin:
        loadTargetJar();
        init sootMethodStacks; //Store method call stack
        sootClasses = Scene.v().getClasses();
        
        Traverse sootClasses:
                if sootClass.isPublic() && !sootClass.isAbstract() && !sootClass.isInterface():
                    sootMethods = sootClass.getMethods();
                    Traverse   sootMethods:
    
                        if  sootMethod.isPublic() && !sootMethod.isAbstract():
                            init methodstack;
                            methodstack.push(sootMethod);
                            methodAnalyser(sootMethod, methodstack)
                            methodstack.pop();

        printStackList(sootMethodStacks);
    end
